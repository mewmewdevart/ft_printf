- A função printf() e como ela funciona
	A função é pré-definida e está armazenada na biblioteca <stdio.h> da linguagem C.
	Ela permite representar na tela valores de qualquer tipo de dado, ela utiliza o mecanismo de formatação, que permite traduzir a representação interna de variaveis para a representação ASCII.

	- Argumento : O primeiro argumento de printf é um string de controle, uma seqüência de caracteres entre aspas  duplas "". Esta string, que sempre deve estar presente, pode especificar através de caracteres especiais (as sequencias de conversao) quantos argumentos estarão presentes nesta invocação da função.
	Estes outros argumentos serão variáveis cujos valores serão formatados e apresentados na tela.

		printf(string de dados e formato, var1, var2,…, varN);

		int printf(const char *format, ...);

	- Observação:  A seqüência de conversão pode ocorrer dentro de qualquer posição dentro do string de controle.
	 A seqüência de conversão pode ser reconhecida dentro da string de controle por iniciar sempre com o caráter %.

- Conversoes do desafio:
• %c Prints a single character.
• %s Prints a string (as defined by the common C convention).
• %p The void * pointer argument has to be printed in hexadecimal format.
• %d Prints a decimal (base 10) number.
• %i Prints an integer in base 10.
• %u Prints an unsigned decimal (base 10) number.
• %x Prints a number in hexadecimal (base 16) lowercase format.
• %X Prints a number in hexadecimal (base 16) uppercase format.
• %% Prints a percent sign.

Link: https://www.dca.fee.unicamp.br/cursos/EA876/apostila/HTML/node131.html
	https://www.sciencedirect.com/topics/computer-science/printf

- O que são funções variadicas?
	Uma função variádica é uma função que permite a passagem de um número indeterminado de parâmetros. Uma função de argumentos variáveis é definida com a reticências (, ... ) no final da lista de parâmetros.

	<stdarg.h>


	Variavel:
		va_list
			Este é um tipo adequado para armazenar as informações necessárias pelas três macros va_start ( ), va_arg ( ) e va_end ( ).

	Macros:
		void va_start ( va_list ap, last_arg )
			This macro initializes ap variable to be used with the va_arg and va_end macros. The last_arg is the last known fixed argument being passed to the function i.e. the argument before the ellipsis.
		
		type va_arg(va_list ap, type)
			This macro retrieves the next argument in the parameter list of the function with type type.

		void va_end(va_list ap)
			This macro allows a function with variable arguments which used the va_start macro to return. If va_end is not called before returning from the function, the result is undefined.


Link : https://www.tutorialspoint.com/c_standard_library/stdarg_h.htm

Link : https://linux.die.net/man/3/stdarg
https://petbcc.ufscar.br/stdarg/

http://linguagemc.com.br/struct-em-c/
Link: https://www.vivaolinux.com.br/artigo/Linguagem-C-Funcoes-Variadicas
https://www.ibm.com/docs/en/zos/2.3.0?topic=lf-va-arg-va-copy-va-end-va-start-access-function-arguments
https://softwareengineering.stackexchange.com/questions/232838/what-is-the-underlying-mechanism-behind-va-list-and-where-is-it-defined


- O que é o Bitwise?


Funções externas:
	malloc, free, write,
	va_start, va_arg, va_copy, va_end

Conversoes pedidas:
%c Prints a single character.
%s Prints a string (as defined by the common C convention).
%p The void * pointer argument has to be printed in hexadecimal format.
%d Prints a decimal (base 10) number.
%i Prints an integer in base 10.
%u Prints an unsigned decimal (base 10) number.
%x Prints a number in hexadecimal (base 16) lowercase format.
%X Prints a number in hexadecimal (base 16) uppercase format.
%% Prints a percent sign.
